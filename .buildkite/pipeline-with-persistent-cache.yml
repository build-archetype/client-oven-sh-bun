steps:
  - label: ':zig: Build with Persistent Cache'
    env:
      # Use host-persistent cache directories
      ZIG_GLOBAL_CACHE_DIR: "/opt/buildkite-cache/zig/global"
      ZIG_LOCAL_CACHE_DIR: "/opt/buildkite-cache/zig/local"
      CCACHE_DIR: "/opt/buildkite-cache/ccache"
      
      # Optional: Subdirectory by git hash for some cache isolation
      # ZIG_GLOBAL_CACHE_DIR: "/opt/buildkite-cache/zig/global/${BUILDKITE_COMMIT:0:8}"
    command: |
      # Ensure cache directories exist (agent creates them)
      mkdir -p "${ZIG_GLOBAL_CACHE_DIR}" "${ZIG_LOCAL_CACHE_DIR}" "${CCACHE_DIR}"
      
      # Build with persistent cache - no restore/save overhead!
      bun run build:release --target bun-zig
    
  - label: ':white_check_mark: Test' 
    env:
      # Reuse same cache directories for testing
      ZIG_GLOBAL_CACHE_DIR: "/opt/buildkite-cache/zig/global"
      ZIG_LOCAL_CACHE_DIR: "/opt/buildkite-cache/zig/local"
      CCACHE_DIR: "/opt/buildkite-cache/ccache"
    command: |
      mkdir -p "${ZIG_GLOBAL_CACHE_DIR}" "${ZIG_LOCAL_CACHE_DIR}" "${CCACHE_DIR}"
      bun test
    depends_on: build

  # Optional: Cache cleanup step (run periodically)
  - label: ':broom: Cache Cleanup'
    if: build.env("BUILDKITE_PIPELINE_DEFAULT_BRANCH") == build.branch
    command: |
      # Clean up cache older than 7 days
      find /opt/buildkite-cache -type f -atime +7 -delete 2>/dev/null || true
      find /opt/buildkite-cache -type d -empty -delete 2>/dev/null || true
      
      echo "Cache cleanup complete"
      du -sh /opt/buildkite-cache/* || true 